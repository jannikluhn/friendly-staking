{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "withdrawal_credentials",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "amount",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "index",
          "type": "bytes"
        }
      ],
      "name": "DepositEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_failedWithdrawalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_processedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "FailedWithdrawalProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "WithdrawalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_failedWithdrawalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "WithdrawalFailed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkeys",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "withdrawal_credentials",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "deposit_data_roots",
          "type": "bytes32[]"
        }
      ],
      "name": "batchDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "withdrawal_credentials",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "deposit_data_root",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "stake_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxNumberOfFailedWithdrawalsToProcess",
          "type": "uint256"
        },
        {
          "internalType": "uint64[]",
          "name": "_amounts",
          "type": "uint64[]"
        },
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "executeSystemWithdrawals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedWithdrawalIndexByWithdrawalIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "failedWithdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "withdrawalIndex",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failedWithdrawalsPointer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_deposit_count",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_deposit_root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_withdrawalIndex",
          "type": "uint64"
        }
      ],
      "name": "isWithdrawalProcessed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextWithdrawalIndex",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfFailedWithdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stake_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_failedWithdrawalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToProceed",
          "type": "uint256"
        }
      ],
      "name": "processFailedWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxNumberOfFailedWithdrawalsToProcess",
          "type": "uint256"
        }
      ],
      "name": "processFailedWithdrawalsFromPointer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "processWithdrawalInternal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake_token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUnwrapper",
          "name": "_unwrapper",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "unwrapTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "validator_withdrawal_credentials",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfdf6097f75aaf3765a6aed7965e7b7218ffc5c0487b68f59a91c8360ad499af5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1817191",
    "logsBloom": "0x
    "blockHash": "0xfc6d518d0cbdfe168710822d79c1bb97fb3ff44ace25ee8e12aaaeb54922bef0",
    "transactionHash": "0xfdf6097f75aaf3765a6aed7965e7b7218ffc5c0487b68f59a91c8360ad499af5",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1817191",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "a5ecd03d2b57c561cfaa6088ce5e0722",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"amount\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"index\",\"type\":\"bytes\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_failedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_processedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"FailedWithdrawalProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"WithdrawalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_failedWithdrawalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"WithdrawalFailed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkeys\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"deposit_data_roots\",\"type\":\"bytes32[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"stake_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumberOfFailedWithdrawalsToProcess\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"_amounts\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"executeSystemWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedWithdrawalIndexByWithdrawalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"failedWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"withdrawalIndex\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failedWithdrawalsPointer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_deposit_count\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_deposit_root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_withdrawalIndex\",\"type\":\"uint64\"}],\"name\":\"isWithdrawalProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextWithdrawalIndex\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfFailedWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_failedWithdrawalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToProceed\",\"type\":\"uint256\"}],\"name\":\"processFailedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumberOfFailedWithdrawalsToProcess\",\"type\":\"uint256\"}],\"name\":\"processFailedWithdrawalsFromPointer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"processWithdrawalInternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUnwrapper\",\"name\":\"_unwrapper\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unwrapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"validator_withdrawal_credentials\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 ETH2.0 deposit contract. For the original implementation, see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\",\"kind\":\"dev\",\"methods\":{\"claimTokens(address,address)\":{\"details\":\"Allows to transfer any locked token from this contract. Only admin can call this method. Deposit-related tokens cannot be claimed.\",\"params\":{\"_to\":\"address that will receive the locked tokens from this contract.\",\"_token\":\"address of the token, if it is not provided (0x00..00), native coins will be transferred.\"}},\"deposit(bytes,bytes,bytes,bytes32,uint256)\":{\"params\":{\"deposit_data_root\":\"The SHA-256 hash of the SSZ-encoded DepositData object. Used as a protection against malformed input.\",\"pubkey\":\"A BLS12-381 public key.\",\"signature\":\"A BLS12-381 signature.\",\"withdrawal_credentials\":\"Commitment to a public key for withdrawals.\"}},\"executeSystemWithdrawals(uint256,uint64[],address[])\":{\"details\":\"Function to be used only in the system transaction. Call to this function will revert only in three cases:     - the caller is not `SYSTEM_WITHDRAWAL_EXECUTOR` or `_admin()`;     - the length of `_amounts` array is not equal to the length of `_addresses` array;     - it is a reentrant access to failed withdrawals processing;     - the call ran out of gas. Call to this function doesn't transmit flow control to any untrusted contract and uses a constant gas limit for each withdrawal, so using constant gas limit and constant number of withdrawals (including failed withdrawals) for calls of this function is ok.\",\"params\":{\"_addresses\":\"Array of addresses that should receive the corresponding amount of tokens.\",\"_amounts\":\"Array of amounts to be withdrawn.\",\"_maxNumberOfFailedWithdrawalsToProcess\":\"Maximum number of failed withdrawals to be processed.\"}},\"get_deposit_count()\":{\"returns\":{\"_0\":\"The deposit count encoded as a little endian 64-bit number.\"}},\"get_deposit_root()\":{\"returns\":{\"_0\":\"The deposit root hash.\"}},\"isWithdrawalProcessed(uint64)\":{\"details\":\"Check if a block's withdrawal has been fully processed or not\",\"params\":{\"_withdrawalIndex\":\"EIP-4895 withdrawal.index property\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"processFailedWithdrawal(uint256,uint256)\":{\"details\":\"Function to be used to process a failed withdrawal (possibly partially).\",\"params\":{\"_amountToProceed\":\"Amount of token to withdraw (for the case it is impossible to withdraw the full amount) (available only for the receiver, will be ignored if other account tries to process the withdrawal).\",\"_failedWithdrawalId\":\"Id of a failed withdrawal.\"}},\"processFailedWithdrawalsFromPointer(uint256)\":{\"details\":\"Function to be used to process failed withdrawals. Call to this function will revert only if it ran out of gas or it is a reentrant access to failed withdrawals processing. Call to this function doesn't transmit flow control to any untrusted contract and uses a constant gas limit for each withdrawal, so using constant gas limit and constant max number of withdrawals for calls of this function is ok.\",\"params\":{\"_maxNumberOfFailedWithdrawalsToProcess\":\"Maximum number of failed withdrawals to be processed.\"}},\"processWithdrawalInternal(uint256,address)\":{\"details\":\"Function to be used to process a withdrawal. Actually it is an internal function, only this contract can call it. This is done in order to roll back all changes in case of revert.\",\"params\":{\"_amount\":\"Amount to be withdrawn.\",\"_receiver\":\"Receiver of the withdrawal.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"unwrapTokens(address,address)\":{\"details\":\"Allows to unwrap the mGNO in this contract to GNO Only admin can call this method.\",\"params\":{\"_unwrapper\":\"address of the mGNO token unwrapper\"}}},\"title\":\"SBCDepositContract\",\"version\":1},\"userdoc\":{\"events\":{\"DepositEvent(bytes,bytes,bytes,bytes,bytes)\":{\"notice\":\"A processed deposit event.\"},\"FailedWithdrawalProcessed(uint256,uint256,address)\":{\"notice\":\"Processed (possibly partially) failed withdrawal event.\"},\"WithdrawalExecuted(uint256,address)\":{\"notice\":\"Executed withdrawal event.\"},\"WithdrawalFailed(uint256,uint256,address)\":{\"notice\":\"Failed withdrawal event.\"}},\"kind\":\"user\",\"methods\":{\"deposit(bytes,bytes,bytes,bytes32,uint256)\":{\"notice\":\"Submit a Phase 0 DepositData object.\"},\"get_deposit_count()\":{\"notice\":\"Query the current deposit count.\"},\"get_deposit_root()\":{\"notice\":\"Query the current deposit root hash.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gnosis/SBCDepositContract.sol\":\"SBCDepositContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/gnosis/SBCDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IERC677Receiver.sol\\\";\\nimport \\\"./interfaces/IUnwrapper.sol\\\";\\nimport \\\"./interfaces/IWithdrawalContract.sol\\\";\\nimport \\\"./utils/PausableEIP1967Admin.sol\\\";\\nimport \\\"./utils/Claimable.sol\\\";\\n\\n/**\\n * @title SBCDepositContract\\n * @dev Implementation of the ERC20 ETH2.0 deposit contract.\\n * For the original implementation, see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\n */\\ncontract SBCDepositContract is\\n    IDepositContract,\\n    IERC165,\\n    IERC677Receiver,\\n    PausableEIP1967Admin,\\n    Claimable,\\n    IWithdrawalContract\\n{\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant DEPOSIT_CONTRACT_TREE_DEPTH = 32;\\n    // NOTE: this also ensures `deposit_count` will fit into 64-bits\\n    uint256 private constant MAX_DEPOSIT_COUNT = 2 ** DEPOSIT_CONTRACT_TREE_DEPTH - 1;\\n\\n    bytes32[DEPOSIT_CONTRACT_TREE_DEPTH] private zero_hashes;\\n\\n    bytes32[DEPOSIT_CONTRACT_TREE_DEPTH] private branch;\\n    uint256 private deposit_count;\\n\\n    mapping(bytes => bytes32) public validator_withdrawal_credentials;\\n\\n    IERC20 public immutable stake_token;\\n\\n    constructor(address _token) {\\n        stake_token = IERC20(_token);\\n    }\\n\\n    function get_deposit_root() external view override returns (bytes32) {\\n    }\\n\\n    function get_deposit_count() external view override returns (bytes memory) {\\n    }\\n\\n    function deposit(\\n        bytes memory pubkey,\\n        bytes memory withdrawal_credentials,\\n        bytes memory signature,\\n        bytes32 deposit_data_root,\\n        uint256 stake_amount\\n    ) external override whenNotPaused {\\n        stake_token.transferFrom(msg.sender, address(this), stake_amount);\\n        _deposit(pubkey, withdrawal_credentials, signature, deposit_data_root, stake_amount);\\n    }\\n\\n    function batchDeposit(\\n        bytes calldata pubkeys,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signatures,\\n        bytes32[] calldata deposit_data_roots\\n    ) external whenNotPaused {\\n    }\\n\\n    function onTokenTransfer(\\n        address,\\n        uint256 stake_amount,\\n        bytes calldata data\\n    ) external override whenNotPaused returns (bool) {\\n        require(msg.sender == address(stake_token), \\\"DepositContract: not a deposit token\\\");\\n        require(data.length % 176 == 32, \\\"DepositContract: incorrect deposit data length\\\");\\n        uint256 count = data.length / 176;\\n        require(count > 0, \\\"BatchDeposit: You should deposit at least one validator\\\");\\n        uint256 stake_amount_per_deposit = stake_amount;\\n        if (count > 1) {\\n            require(count <= 128, \\\"BatchDeposit: You can deposit max 128 validators at a time\\\");\\n            require(stake_amount == 1 ether * count, \\\"BatchDeposit: batch deposits require 1 GNO deposit amount\\\");\\n            stake_amount_per_deposit = 1 ether;\\n        }\\n\\n        bytes memory withdrawal_credentials = data[0:32];\\n        for (uint256 p = 32; p < data.length; p += 176) {\\n            bytes memory pubkey = data[p:p + 48];\\n            bytes memory signature = data[p + 48:p + 144];\\n            bytes32 deposit_data_root = bytes32(data[p + 144:p + 176]);\\n            _deposit(pubkey, withdrawal_credentials, signature, deposit_data_root, stake_amount_per_deposit);\\n        }\\n        return true;\\n    }\\n\\n    function _deposit(\\n        bytes memory pubkey,\\n        bytes memory withdrawal_credentials,\\n        bytes memory signature,\\n        bytes32 deposit_data_root,\\n        uint256 stake_amount\\n    ) internal {\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IDepositContract).interfaceId ||\\n            interfaceId == type(IERC677Receiver).interfaceId;\\n    }\\n\\n    /**\\n     * @dev Allows to transfer any locked token from this contract.\\n     * Only admin can call this method.\\n     * Deposit-related tokens cannot be claimed.\\n     * @param _token address of the token, if it is not provided (0x00..00), native coins will be transferred.\\n     * @param _to address that will receive the locked tokens from this contract.\\n     */\\n    function claimTokens(address _token, address _to) external onlyAdmin {\\n    }\\n\\n    function to_little_endian_64(uint64 value) internal pure returns (bytes memory ret) {\\n        ret = new bytes(8);\\n        bytes8 bytesValue = bytes8(value);\\n        // Byteswapping during copying to bytes.\\n        ret[0] = bytesValue[7];\\n        ret[1] = bytesValue[6];\\n        ret[2] = bytesValue[5];\\n        ret[3] = bytesValue[4];\\n        ret[4] = bytesValue[3];\\n        ret[5] = bytesValue[2];\\n        ret[6] = bytesValue[1];\\n        ret[7] = bytesValue[0];\\n    }\\n\\n    /*** Withdrawal part ***/\\n\\n    address private constant SYSTEM_WITHDRAWAL_EXECUTOR = 0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE;\\n\\n    uint256 private constant DEFAULT_GAS_PER_WITHDRAWAL = 300000;\\n\\n    /**\\n     * @dev Function to be used to process a withdrawal.\\n     * Actually it is an internal function, only this contract can call it.\\n     * This is done in order to roll back all changes in case of revert.\\n     * @param _amount Amount to be withdrawn.\\n     * @param _receiver Receiver of the withdrawal.\\n     */\\n    function processWithdrawalInternal(uint256 _amount, address _receiver) external {\\n    }\\n\\n    /**\\n     * @dev Internal function to be used to process a withdrawal.\\n     * Uses processWithdrawalInternal under the hood.\\n     * Call to this function will revert only if it ran out of gas.\\n     * @param _amount Amount to be withdrawn.\\n     * @param _receiver Receiver of the withdrawal.\\n     * @return success An indicator of whether the withdrawal was successful or not.\\n     */\\n    function _processWithdrawal(uint256 _amount, address _receiver, uint256 gasLimit) internal returns (bool success) {\\n    }\\n\\n    struct FailedWithdrawalRecord {\\n        uint256 amount;\\n        address receiver;\\n        uint64 withdrawalIndex;\\n    }\\n    mapping(uint256 => FailedWithdrawalRecord) public failedWithdrawals;\\n    mapping(uint64 => uint256) public failedWithdrawalIndexByWithdrawalIndex;\\n    uint256 public numberOfFailedWithdrawals;\\n    uint64 public nextWithdrawalIndex;\\n\\n    /**\\n     * @dev Function to be used to process a failed withdrawal (possibly partially).\\n     * @param _failedWithdrawalId Id of a failed withdrawal.\\n     * @param _amountToProceed Amount of token to withdraw (for the case it is impossible to withdraw the full amount)\\n     * (available only for the receiver, will be ignored if other account tries to process the withdrawal).\\n     */\\n    function processFailedWithdrawal(uint256 _failedWithdrawalId, uint256 _amountToProceed) external whenNotPaused {\\n    }\\n\\n    uint256 public failedWithdrawalsPointer;\\n\\n    /**\\n     * @dev Function to be used to process failed withdrawals.\\n     * Call to this function will revert only if it ran out of gas or it is a reentrant access to failed withdrawals processing.\\n     * Call to this function doesn't transmit flow control to any untrusted contract and uses a constant gas limit for each withdrawal,\\n     * so using constant gas limit and constant max number of withdrawals for calls of this function is ok.\\n     * @param _maxNumberOfFailedWithdrawalsToProcess Maximum number of failed withdrawals to be processed.\\n     */\\n    function processFailedWithdrawalsFromPointer(uint256 _maxNumberOfFailedWithdrawalsToProcess) public {\\n    }\\n\\n    /**\\n     * @dev Function to be used only in the system transaction.\\n     * Call to this function will revert only in three cases:\\n     *     - the caller is not `SYSTEM_WITHDRAWAL_EXECUTOR` or `_admin()`;\\n     *     - the length of `_amounts` array is not equal to the length of `_addresses` array;\\n     *     - it is a reentrant access to failed withdrawals processing;\\n     *     - the call ran out of gas.\\n     * Call to this function doesn't transmit flow control to any untrusted contract and uses a constant gas limit for each withdrawal,\\n     * so using constant gas limit and constant number of withdrawals (including failed withdrawals) for calls of this function is ok.\\n     * @param _maxNumberOfFailedWithdrawalsToProcess Maximum number of failed withdrawals to be processed.\\n     * @param _amounts Array of amounts to be withdrawn.\\n     * @param _addresses Array of addresses that should receive the corresponding amount of tokens.\\n     */\\n    function executeSystemWithdrawals(\\n        uint256 _maxNumberOfFailedWithdrawalsToProcess,\\n        uint64[] calldata _amounts,\\n        address[] calldata _addresses\\n    ) external {\\n    }\\n\\n    /**\\n     * @dev Check if a block's withdrawal has been fully processed or not\\n     * @param _withdrawalIndex EIP-4895 withdrawal.index property\\n     */\\n    function isWithdrawalProcessed(uint64 _withdrawalIndex) external view returns (bool) {\\n    }\\n\\n    /**\\n     * @dev Allows to unwrap the mGNO in this contract to GNO\\n     * Only admin can call this method.\\n     * @param _unwrapper address of the mGNO token unwrapper\\n     */\\n    function unwrapTokens(IUnwrapper _unwrapper, IERC20 _token) external onlyAdmin {\\n    }\\n}\\n\",\"keccak256\":\"0xda060b208a88054dd4a0e8b57584a7023962328806294927ffc7f7e74d498316\",\"license\":\"CC0-1.0\"},\"src/gnosis/interfaces/IDepositContract.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes memory pubkey,\\n        bytes memory withdrawal_credentials,\\n        bytes memory signature,\\n        bytes32 deposit_data_root,\\n        uint256 stake_amount\\n    ) external;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x978092fc881ab39b11998fb36eb841552915723e83d72b6fff1fa655dcd80049\",\"license\":\"CC0-1.0\"},\"src/gnosis/interfaces/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IERC677Receiver {\\n    function onTokenTransfer(address from, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6c1686700dce7532d1793d180760e4e0f3a86550b633480757bbc2a691bf0a6e\",\"license\":\"CC0-1.0\"},\"src/gnosis/interfaces/IUnwrapper.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IUnwrapper {\\n    /**\\n     * @dev Swaps some of the wrapped tokens to the whitelisted token.\\n     * Wrapped tokens will be burned.\\n     * @param _token Address of the whitelisted token contract.\\n     * @param _amount Amount of tokens to swap.\\n     * @return Amount of returned tokens.\\n     */\\n    function unwrap(address _token, uint256 _amount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xdc2566fbc019fb15bace392d17c3185ff7d1fc7dafb21fd7af4f4603086b86a7\",\"license\":\"CC0-1.0\"},\"src/gnosis/interfaces/IWithdrawalContract.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IWithdrawalContract {\\n    /**\\n     * @dev Function to be used only in the system transaction.\\n     * Call to this function will revert only in three cases:\\n     *     - the caller is not `SYSTEM_WITHDRAWAL_EXECUTOR` or `_admin()`;\\n     *     - the length of `_amounts` array is not equal to the length of `_addresses` array;\\n     *     - it is a reentrant access to failed withdrawals processing;\\n     *     - the call ran out of gas.\\n     * Call to this function doesn't transmit flow control to any untrusted contract and uses a constant gas limit for each withdrawal,\\n     * so using constant gas limit and constant number of withdrawals (including failed withdrawals) for calls of this function is ok.\\n     * @param _maxNumberOfFailedWithdrawalsToProcess Maximum number of failed withdrawals to be processed.\\n     * @param _amounts Array of amounts to be withdrawn.\\n     * @param _addresses Array of addresses that should receive the corresponding amount of tokens.\\n     */\\n    function executeSystemWithdrawals(\\n        uint256 _maxNumberOfFailedWithdrawalsToProcess,\\n        uint64[] calldata _amounts,\\n        address[] calldata _addresses\\n    ) external;\\n\\n    /// @notice Executed withdrawal event.\\n    event WithdrawalExecuted(uint256 _amount, address indexed _address);\\n\\n    /// @notice Failed withdrawal event.\\n    event WithdrawalFailed(uint256 indexed _failedWithdrawalId, uint256 _amount, address indexed _address);\\n\\n    /**\\n     * @dev Function to be used to process failed withdrawals.\\n     * Call to this function will revert only if it ran out of gas or it is a reentrant access to failed withdrawals processing.\\n     * Call to this function doesn't transmit flow control to any untrusted contract and uses a constant gas limit for each withdrawal,\\n     * so using constant gas limit and constant max number of withdrawals for calls of this function is ok.\\n     * @param _maxNumberOfFailedWithdrawalsToProcess Maximum number of failed withdrawals to be processed.\\n     */\\n    function processFailedWithdrawalsFromPointer(uint256 _maxNumberOfFailedWithdrawalsToProcess) external;\\n\\n    /**\\n     * @dev Function to be used to process a failed withdrawal (possibly partially).\\n     * @param _failedWithdrawalId Id of a failed withdrawal.\\n     * @param _amountToProceed Amount of token to withdraw (for the case it is impossible to withdraw the full amount)\\n     * (available only for the receiver, will be ignored if other account tries to process the withdrawal).\\n     */\\n    function processFailedWithdrawal(uint256 _failedWithdrawalId, uint256 _amountToProceed) external;\\n\\n    /// @notice Processed (possibly partially) failed withdrawal event.\\n    event FailedWithdrawalProcessed(\\n        uint256 indexed _failedWithdrawalId,\\n        uint256 _processedAmount,\\n        address indexed _address\\n    );\\n}\\n\",\"keccak256\":\"0x1f981a5ea181b064d2a04724c4a2ce1354bd186a59745e591022e15209060707\",\"license\":\"CC0-1.0\"},\"src/gnosis/utils/Claimable.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Claimable\\n * @dev Implementation of the claiming utils that can be useful for withdrawing accidentally sent tokens.\\n */\\ncontract Claimable {\\n    /**\\n     * @dev Withdraws the erc20 tokens or native coins from this contract.\\n     * @param _token address of the claimed token or address(0) for native coins.\\n     * @param _to address of the tokens/coins receiver.\\n     */\\n    function _claimValues(address _token, address _to) internal {\\n        if (_token == address(0)) {\\n            _claimNativeCoins(_to);\\n        } else {\\n            _claimERC20Tokens(_token, _to);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function for withdrawing all native coins from the contract.\\n     * @param _to address of the coins receiver.\\n     */\\n    function _claimNativeCoins(address _to) internal {\\n        uint256 balance = address(this).balance;\\n        payable(_to).transfer(balance);\\n    }\\n\\n    /**\\n     * @dev Internal function for withdrawing all tokens of some particular ERC20 contract from this contract.\\n     * @param _token address of the claimed ERC20 token.\\n     * @param _to address of the tokens receiver.\\n     */\\n    function _claimERC20Tokens(address _token, address _to) internal {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).transfer(_to, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x5837f9ef2576a63be3456ba1725244e7371949df95ab707cfb175eaf23d863cb\",\"license\":\"CC0-1.0\"},\"src/gnosis/utils/EIP1967Admin.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title EIP1967Admin\\n * @dev Upgradeable proxy pattern implementation according to minimalistic EIP1967.\\n */\\ncontract EIP1967Admin {\\n    // EIP 1967\\n    // bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1)\\n    uint256 internal constant EIP1967_ADMIN_STORAGE =\\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin());\\n        _;\\n    }\\n\\n    function _admin() internal view returns (address res) {\\n        assembly {\\n            res := sload(EIP1967_ADMIN_STORAGE)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3670ed1561f347f33b9ad55a23420ad8e49be7364e3425ac66a5cf03c3e02ad4\",\"license\":\"CC0-1.0\"},\"src/gnosis/utils/PausableEIP1967Admin.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./EIP1967Admin.sol\\\";\\n\\n/**\\n * @title PausableEIP1967Admin\\n * @dev Pausable contract, controlled by the current EIP1967 proxy owner.\\n */\\ncontract PausableEIP1967Admin is EIP1967Admin, Pausable {\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x2ecb93c4118cd0052a53c1b3c2e9af2da7247172154e2f83d7c1227df0de7c3c\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002137380380620021378339818101604052810190620000379190620000f6565b60008060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000128565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000be8262000091565b9050919050565b620000d081620000b1565b8114620000dc57600080fd5b50565b600081519050620000f081620000c5565b92915050565b6000602082840312156200010f576200010e6200008c565b5b60006200011f84828501620000df565b91505092915050565b608051611fe5620001526000396000818161057e0152818161072d01526108640152611fe56000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806369ffa08a116100c3578063b2e2e2e41161007c578063b2e2e2e414610378578063b6921e5714610396578063bba9282e146103b2578063c5f2892f146103d0578063c82655b7146103ee578063def357e01461040a5761014d565b806369ffa08a146102a4578063785e9d82146102c057806379d0c0bc146102f25780638456cb591461030e5780638e5fb7a714610318578063a4c0ed36146103485761014d565b80634128c37f116101155780634128c37f146101f45780634694bd1e146102125780635bf207d21461022e5780635c975abb1461024a578063621fd13014610268578063640415bf146102865761014d565b806301ffc9a7146101525780630cac9f31146101825780631b9672a21461019e57806324db4c46146101ba5780633f4ba83a146101ea575b600080fd5b61016c60048036038101906101679190610e38565b61043a565b6040516101799190610e80565b60405180910390f35b61019c6004803603810190610197919061104d565b610574565b005b6101b860048036038101906101b3919061117a565b610640565b005b6101d460048036038101906101cf91906111ba565b610644565b6040516101e19190611212565b60405180910390f35b6101f2610672565b005b6101fc6106bb565b604051610209919061123c565b60405180910390f35b61022c600480360381019061022791906112d3565b6106c1565b005b61024860048036038101906102439190611313565b610704565b005b610252610710565b60405161025f9190610e80565b60405180910390f35b610270610726565b60405161027d91906113db565b60405180910390f35b61028e61072b565b60405161029b919061145c565b60405180910390f35b6102be60048036038101906102b99190611477565b61074f565b005b6102da60048036038101906102d591906114b7565b610792565b6040516102e993929190611516565b60405180910390f35b61030c60048036038101906103079190611603565b6107f0565b005b6103166107f7565b005b610332600480360381019061032d91906116c4565b610840565b60405161033f919061123c565b60405180910390f35b610362600480360381019061035d9190611747565b610858565b60405161036f9190610e80565b60405180910390f35b610380610bfc565b60405161038d919061123c565b60405180910390f35b6103b060048036038101906103ab91906114b7565b610c02565b005b6103ba610c05565b6040516103c791906117bb565b60405180910390f35b6103d8610c1f565b6040516103e59190611212565b60405180910390f35b6104086004803603810190610403919061182c565b610c24565b005b610424600480360381019061041f91906116c4565b610c36565b6040516104319190610e80565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050557507fab41c72e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061056d57507fa4c0ed36000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b61057c610c3d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016105d993929190611915565b602060405180830381600087803b1580156105f357600080fd5b505af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190611978565b506106398585858585610c87565b5050505050565b5050565b6042818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b61067a610c8e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b157600080fd5b6106b9610cb7565b565b60475481565b6106c9610c8e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070057600080fd5b5050565b61070c610c3d565b5050565b60008060009054906101000a900460ff16905090565b606090565b7f000000000000000000000000000000000000000000000000000000000000000081565b610757610c8e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461078e57600080fd5b5050565b60436020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900467ffffffffffffffff16905083565b5050505050565b6107ff610c8e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083657600080fd5b61083e610d19565b565b60446020528060005260406000206000915090505481565b6000610862610c3d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e790611a28565b60405180910390fd5b602060b0848490506109029190611a77565b14610942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093990611b1a565b60405180910390fd5b600060b0848490506109549190611b69565b905060008111610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099090611c0c565b60405180910390fd5b60008590506001821115610a4c5760808211156109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e290611c9e565b60405180910390fd5b81670de0b6b3a76400006109ff9190611cbe565b8614610a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3790611d8a565b60405180910390fd5b670de0b6b3a764000090505b60008585600090602092610a6293929190611db4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000602090505b86869050811015610bec57600087878390603085610acc9190611def565b92610ad993929190611db4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008888603085610b2f9190611def565b90609086610b3d9190611def565b92610b4a93929190611db4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008989609086610ba09190611def565b9060b087610bae9190611def565b92610bbb93929190611db4565b90610bc69190611e5d565b9050610bd5838684848a610c87565b50505060b081610be59190611def565b9050610aae565b5060019350505050949350505050565b60455481565b50565b604660009054906101000a900467ffffffffffffffff1681565b600090565b610c2c610c3d565b5050505050505050565b6000919050565b610c45610710565b15610c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7c90611f08565b60405180910390fd5b565b5050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b610cbf610d7b565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610d02610dc4565b604051610d0f9190611f28565b60405180910390a1565b610d21610c3d565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610d64610dc4565b604051610d719190611f28565b60405180910390a1565b610d83610710565b610dc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db990611f8f565b60405180910390fd5b565b600033905090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610e1581610de0565b8114610e2057600080fd5b50565b600081359050610e3281610e0c565b92915050565b600060208284031215610e4e57610e4d610dd6565b5b6000610e5c84828501610e23565b91505092915050565b60008115159050919050565b610e7a81610e65565b82525050565b6000602082019050610e956000830184610e71565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610eee82610ea5565b810181811067ffffffffffffffff82111715610f0d57610f0c610eb6565b5b80604052505050565b6000610f20610dcc565b9050610f2c8282610ee5565b919050565b600067ffffffffffffffff821115610f4c57610f4b610eb6565b5b610f5582610ea5565b9050602081019050919050565b82818337600083830152505050565b6000610f84610f7f84610f31565b610f16565b905082815260208101848484011115610fa057610f9f610ea0565b5b610fab848285610f62565b509392505050565b600082601f830112610fc857610fc7610e9b565b5b8135610fd8848260208601610f71565b91505092915050565b6000819050919050565b610ff481610fe1565b8114610fff57600080fd5b50565b60008135905061101181610feb565b92915050565b6000819050919050565b61102a81611017565b811461103557600080fd5b50565b60008135905061104781611021565b92915050565b600080600080600060a0868803121561106957611068610dd6565b5b600086013567ffffffffffffffff81111561108757611086610ddb565b5b61109388828901610fb3565b955050602086013567ffffffffffffffff8111156110b4576110b3610ddb565b5b6110c088828901610fb3565b945050604086013567ffffffffffffffff8111156110e1576110e0610ddb565b5b6110ed88828901610fb3565b93505060606110fe88828901611002565b925050608061110f88828901611038565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111478261111c565b9050919050565b6111578161113c565b811461116257600080fd5b50565b6000813590506111748161114e565b92915050565b6000806040838503121561119157611190610dd6565b5b600061119f85828601611038565b92505060206111b085828601611165565b9150509250929050565b6000602082840312156111d0576111cf610dd6565b5b600082013567ffffffffffffffff8111156111ee576111ed610ddb565b5b6111fa84828501610fb3565b91505092915050565b61120c81610fe1565b82525050565b60006020820190506112276000830184611203565b92915050565b61123681611017565b82525050565b6000602082019050611251600083018461122d565b92915050565b60006112628261113c565b9050919050565b61127281611257565b811461127d57600080fd5b50565b60008135905061128f81611269565b92915050565b60006112a08261113c565b9050919050565b6112b081611295565b81146112bb57600080fd5b50565b6000813590506112cd816112a7565b92915050565b600080604083850312156112ea576112e9610dd6565b5b60006112f885828601611280565b9250506020611309858286016112be565b9150509250929050565b6000806040838503121561132a57611329610dd6565b5b600061133885828601611038565b925050602061134985828601611038565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561138d578082015181840152602081019050611372565b8381111561139c576000848401525b50505050565b60006113ad82611353565b6113b7818561135e565b93506113c781856020860161136f565b6113d081610ea5565b840191505092915050565b600060208201905081810360008301526113f581846113a2565b905092915050565b6000819050919050565b600061142261141d6114188461111c565b6113fd565b61111c565b9050919050565b600061143482611407565b9050919050565b600061144682611429565b9050919050565b6114568161143b565b82525050565b6000602082019050611471600083018461144d565b92915050565b6000806040838503121561148e5761148d610dd6565b5b600061149c85828601611165565b92505060206114ad85828601611165565b9150509250929050565b6000602082840312156114cd576114cc610dd6565b5b60006114db84828501611038565b91505092915050565b6114ed8161113c565b82525050565b600067ffffffffffffffff82169050919050565b611510816114f3565b82525050565b600060608201905061152b600083018661122d565b61153860208301856114e4565b6115456040830184611507565b949350505050565b600080fd5b600080fd5b60008083601f84011261156d5761156c610e9b565b5b8235905067ffffffffffffffff81111561158a5761158961154d565b5b6020830191508360208202830111156115a6576115a5611552565b5b9250929050565b60008083601f8401126115c3576115c2610e9b565b5b8235905067ffffffffffffffff8111156115e0576115df61154d565b5b6020830191508360208202830111156115fc576115fb611552565b5b9250929050565b60008060008060006060868803121561161f5761161e610dd6565b5b600061162d88828901611038565b955050602086013567ffffffffffffffff81111561164e5761164d610ddb565b5b61165a88828901611557565b9450945050604086013567ffffffffffffffff81111561167d5761167c610ddb565b5b611689888289016115ad565b92509250509295509295909350565b6116a1816114f3565b81146116ac57600080fd5b50565b6000813590506116be81611698565b92915050565b6000602082840312156116da576116d9610dd6565b5b60006116e8848285016116af565b91505092915050565b60008083601f84011261170757611706610e9b565b5b8235905067ffffffffffffffff8111156117245761172361154d565b5b6020830191508360018202830111156117405761173f611552565b5b9250929050565b6000806000806060858703121561176157611760610dd6565b5b600061176f87828801611165565b945050602061178087828801611038565b935050604085013567ffffffffffffffff8111156117a1576117a0610ddb565b5b6117ad878288016116f1565b925092505092959194509250565b60006020820190506117d06000830184611507565b92915050565b60008083601f8401126117ec576117eb610e9b565b5b8235905067ffffffffffffffff8111156118095761180861154d565b5b60208301915083602082028301111561182557611824611552565b5b9250929050565b6000806000806000806000806080898b03121561184c5761184b610dd6565b5b600089013567ffffffffffffffff81111561186a57611869610ddb565b5b6118768b828c016116f1565b9850985050602089013567ffffffffffffffff81111561189957611898610ddb565b5b6118a58b828c016116f1565b9650965050604089013567ffffffffffffffff8111156118c8576118c7610ddb565b5b6118d48b828c016116f1565b9450945050606089013567ffffffffffffffff8111156118f7576118f6610ddb565b5b6119038b828c016117d6565b92509250509295985092959890939650565b600060608201905061192a60008301866114e4565b61193760208301856114e4565b611944604083018461122d565b949350505050565b61195581610e65565b811461196057600080fd5b50565b6000815190506119728161194c565b92915050565b60006020828403121561198e5761198d610dd6565b5b600061199c84828501611963565b91505092915050565b600082825260208201905092915050565b7f4465706f736974436f6e74726163743a206e6f742061206465706f736974207460008201527f6f6b656e00000000000000000000000000000000000000000000000000000000602082015250565b6000611a126024836119a5565b9150611a1d826119b6565b604082019050919050565b60006020820190508181036000830152611a4181611a05565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611a8282611017565b9150611a8d83611017565b925082611a9d57611a9c611a48565b5b828206905092915050565b7f4465706f736974436f6e74726163743a20696e636f7272656374206465706f7360008201527f69742064617461206c656e677468000000000000000000000000000000000000602082015250565b6000611b04602e836119a5565b9150611b0f82611aa8565b604082019050919050565b60006020820190508181036000830152611b3381611af7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b7482611017565b9150611b7f83611017565b925082611b8f57611b8e611a48565b5b828204905092915050565b7f42617463684465706f7369743a20596f752073686f756c64206465706f73697460008201527f206174206c65617374206f6e652076616c696461746f72000000000000000000602082015250565b6000611bf66037836119a5565b9150611c0182611b9a565b604082019050919050565b60006020820190508181036000830152611c2581611be9565b9050919050565b7f42617463684465706f7369743a20596f752063616e206465706f736974206d6160008201527f78203132382076616c696461746f727320617420612074696d65000000000000602082015250565b6000611c88603a836119a5565b9150611c9382611c2c565b604082019050919050565b60006020820190508181036000830152611cb781611c7b565b9050919050565b6000611cc982611017565b9150611cd483611017565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d0d57611d0c611b3a565b5b828202905092915050565b7f42617463684465706f7369743a206261746368206465706f736974732072657160008201527f75697265203120474e4f206465706f73697420616d6f756e7400000000000000602082015250565b6000611d746039836119a5565b9150611d7f82611d18565b604082019050919050565b60006020820190508181036000830152611da381611d67565b9050919050565b600080fd5b600080fd5b60008085851115611dc857611dc7611daa565b5b83861115611dd957611dd8611daf565b5b6001850283019150848603905094509492505050565b6000611dfa82611017565b9150611e0583611017565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e3a57611e39611b3a565b5b828201905092915050565b600082905092915050565b600082821b905092915050565b6000611e698383611e45565b82611e748135610fe1565b92506020821015611eb457611eaf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802611e50565b831692505b505092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000611ef26010836119a5565b9150611efd82611ebc565b602082019050919050565b60006020820190508181036000830152611f2181611ee5565b9050919050565b6000602082019050611f3d60008301846114e4565b92915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000611f796014836119a5565b9150611f8482611f43565b602082019050919050565b60006020820190508181036000830152611fa881611f6c565b905091905056fea2646970667358221220916d1dce971df262abb10b1b04ba0f7f2cb69f8ad7c527405c105de166ecc0e064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806369ffa08a116100c3578063b2e2e2e41161007c578063b2e2e2e414610378578063b6921e5714610396578063bba9282e146103b2578063c5f2892f146103d0578063c82655b7146103ee578063def357e01461040a5761014d565b806369ffa08a146102a4578063785e9d82146102c057806379d0c0bc146102f25780638456cb591461030e5780638e5fb7a714610318578063a4c0ed36146103485761014d565b80634128c37f116101155780634128c37f146101f45780634694bd1e146102125780635bf207d21461022e5780635c975abb1461024a578063621fd13014610268578063640415bf146102865761014d565b806301ffc9a7146101525780630cac9f31146101825780631b9672a21461019e57806324db4c46146101ba5780633f4ba83a146101ea575b600080fd5b61016c60048036038101906101679190610e38565b61043a565b6040516101799190610e80565b60405180910390f35b61019c6004803603810190610197919061104d565b610574565b005b6101b860048036038101906101b3919061117a565b610640565b005b6101d460048036038101906101cf91906111ba565b610644565b6040516101e19190611212565b60405180910390f35b6101f2610672565b005b6101fc6106bb565b604051610209919061123c565b60405180910390f35b61022c600480360381019061022791906112d3565b6106c1565b005b61024860048036038101906102439190611313565b610704565b005b610252610710565b60405161025f9190610e80565b60405180910390f35b610270610726565b60405161027d91906113db565b60405180910390f35b61028e61072b565b60405161029b919061145c565b60405180910390f35b6102be60048036038101906102b99190611477565b61074f565b005b6102da60048036038101906102d591906114b7565b610792565b6040516102e993929190611516565b60405180910390f35b61030c60048036038101906103079190611603565b6107f0565b005b6103166107f7565b005b610332600480360381019061032d91906116c4565b610840565b60405161033f919061123c565b60405180910390f35b610362600480360381019061035d9190611747565b610858565b60405161036f9190610e80565b60405180910390f35b610380610bfc565b60405161038d919061123c565b60405180910390f35b6103b060048036038101906103ab91906114b7565b610c02565b005b6103ba610c05565b6040516103c791906117bb565b60405180910390f35b6103d8610c1f565b6040516103e59190611212565b60405180910390f35b6104086004803603810190610403919061182c565b610c24565b005b610424600480360381019061041f91906116c4565b610c36565b6040516104319190610e80565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050557507fab41c72e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061056d57507fa4c0ed36000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b61057c610c3d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016105d993929190611915565b602060405180830381600087803b1580156105f357600080fd5b505af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190611978565b506106398585858585610c87565b5050505050565b5050565b6042818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b61067a610c8e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b157600080fd5b6106b9610cb7565b565b60475481565b6106c9610c8e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070057600080fd5b5050565b61070c610c3d565b5050565b60008060009054906101000a900460ff16905090565b606090565b7f000000000000000000000000000000000000000000000000000000000000000081565b610757610c8e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461078e57600080fd5b5050565b60436020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900467ffffffffffffffff16905083565b5050505050565b6107ff610c8e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083657600080fd5b61083e610d19565b565b60446020528060005260406000206000915090505481565b6000610862610c3d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e790611a28565b60405180910390fd5b602060b0848490506109029190611a77565b14610942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093990611b1a565b60405180910390fd5b600060b0848490506109549190611b69565b905060008111610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099090611c0c565b60405180910390fd5b60008590506001821115610a4c5760808211156109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e290611c9e565b60405180910390fd5b81670de0b6b3a76400006109ff9190611cbe565b8614610a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3790611d8a565b60405180910390fd5b670de0b6b3a764000090505b60008585600090602092610a6293929190611db4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000602090505b86869050811015610bec57600087878390603085610acc9190611def565b92610ad993929190611db4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008888603085610b2f9190611def565b90609086610b3d9190611def565b92610b4a93929190611db4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008989609086610ba09190611def565b9060b087610bae9190611def565b92610bbb93929190611db4565b90610bc69190611e5d565b9050610bd5838684848a610c87565b50505060b081610be59190611def565b9050610aae565b5060019350505050949350505050565b60455481565b50565b604660009054906101000a900467ffffffffffffffff1681565b600090565b610c2c610c3d565b5050505050505050565b6000919050565b610c45610710565b15610c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7c90611f08565b60405180910390fd5b565b5050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b610cbf610d7b565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610d02610dc4565b604051610d0f9190611f28565b60405180910390a1565b610d21610c3d565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610d64610dc4565b604051610d719190611f28565b60405180910390a1565b610d83610710565b610dc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db990611f8f565b60405180910390fd5b565b600033905090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610e1581610de0565b8114610e2057600080fd5b50565b600081359050610e3281610e0c565b92915050565b600060208284031215610e4e57610e4d610dd6565b5b6000610e5c84828501610e23565b91505092915050565b60008115159050919050565b610e7a81610e65565b82525050565b6000602082019050610e956000830184610e71565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610eee82610ea5565b810181811067ffffffffffffffff82111715610f0d57610f0c610eb6565b5b80604052505050565b6000610f20610dcc565b9050610f2c8282610ee5565b919050565b600067ffffffffffffffff821115610f4c57610f4b610eb6565b5b610f5582610ea5565b9050602081019050919050565b82818337600083830152505050565b6000610f84610f7f84610f31565b610f16565b905082815260208101848484011115610fa057610f9f610ea0565b5b610fab848285610f62565b509392505050565b600082601f830112610fc857610fc7610e9b565b5b8135610fd8848260208601610f71565b91505092915050565b6000819050919050565b610ff481610fe1565b8114610fff57600080fd5b50565b60008135905061101181610feb565b92915050565b6000819050919050565b61102a81611017565b811461103557600080fd5b50565b60008135905061104781611021565b92915050565b600080600080600060a0868803121561106957611068610dd6565b5b600086013567ffffffffffffffff81111561108757611086610ddb565b5b61109388828901610fb3565b955050602086013567ffffffffffffffff8111156110b4576110b3610ddb565b5b6110c088828901610fb3565b945050604086013567ffffffffffffffff8111156110e1576110e0610ddb565b5b6110ed88828901610fb3565b93505060606110fe88828901611002565b925050608061110f88828901611038565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111478261111c565b9050919050565b6111578161113c565b811461116257600080fd5b50565b6000813590506111748161114e565b92915050565b6000806040838503121561119157611190610dd6565b5b600061119f85828601611038565b92505060206111b085828601611165565b9150509250929050565b6000602082840312156111d0576111cf610dd6565b5b600082013567ffffffffffffffff8111156111ee576111ed610ddb565b5b6111fa84828501610fb3565b91505092915050565b61120c81610fe1565b82525050565b60006020820190506112276000830184611203565b92915050565b61123681611017565b82525050565b6000602082019050611251600083018461122d565b92915050565b60006112628261113c565b9050919050565b61127281611257565b811461127d57600080fd5b50565b60008135905061128f81611269565b92915050565b60006112a08261113c565b9050919050565b6112b081611295565b81146112bb57600080fd5b50565b6000813590506112cd816112a7565b92915050565b600080604083850312156112ea576112e9610dd6565b5b60006112f885828601611280565b9250506020611309858286016112be565b9150509250929050565b6000806040838503121561132a57611329610dd6565b5b600061133885828601611038565b925050602061134985828601611038565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561138d578082015181840152602081019050611372565b8381111561139c576000848401525b50505050565b60006113ad82611353565b6113b7818561135e565b93506113c781856020860161136f565b6113d081610ea5565b840191505092915050565b600060208201905081810360008301526113f581846113a2565b905092915050565b6000819050919050565b600061142261141d6114188461111c565b6113fd565b61111c565b9050919050565b600061143482611407565b9050919050565b600061144682611429565b9050919050565b6114568161143b565b82525050565b6000602082019050611471600083018461144d565b92915050565b6000806040838503121561148e5761148d610dd6565b5b600061149c85828601611165565b92505060206114ad85828601611165565b9150509250929050565b6000602082840312156114cd576114cc610dd6565b5b60006114db84828501611038565b91505092915050565b6114ed8161113c565b82525050565b600067ffffffffffffffff82169050919050565b611510816114f3565b82525050565b600060608201905061152b600083018661122d565b61153860208301856114e4565b6115456040830184611507565b949350505050565b600080fd5b600080fd5b60008083601f84011261156d5761156c610e9b565b5b8235905067ffffffffffffffff81111561158a5761158961154d565b5b6020830191508360208202830111156115a6576115a5611552565b5b9250929050565b60008083601f8401126115c3576115c2610e9b565b5b8235905067ffffffffffffffff8111156115e0576115df61154d565b5b6020830191508360208202830111156115fc576115fb611552565b5b9250929050565b60008060008060006060868803121561161f5761161e610dd6565b5b600061162d88828901611038565b955050602086013567ffffffffffffffff81111561164e5761164d610ddb565b5b61165a88828901611557565b9450945050604086013567ffffffffffffffff81111561167d5761167c610ddb565b5b611689888289016115ad565b92509250509295509295909350565b6116a1816114f3565b81146116ac57600080fd5b50565b6000813590506116be81611698565b92915050565b6000602082840312156116da576116d9610dd6565b5b60006116e8848285016116af565b91505092915050565b60008083601f84011261170757611706610e9b565b5b8235905067ffffffffffffffff8111156117245761172361154d565b5b6020830191508360018202830111156117405761173f611552565b5b9250929050565b6000806000806060858703121561176157611760610dd6565b5b600061176f87828801611165565b945050602061178087828801611038565b935050604085013567ffffffffffffffff8111156117a1576117a0610ddb565b5b6117ad878288016116f1565b925092505092959194509250565b60006020820190506117d06000830184611507565b92915050565b60008083601f8401126117ec576117eb610e9b565b5b8235905067ffffffffffffffff8111156118095761180861154d565b5b60208301915083602082028301111561182557611824611552565b5b9250929050565b6000806000806000806000806080898b03121561184c5761184b610dd6565b5b600089013567ffffffffffffffff81111561186a57611869610ddb565b5b6118768b828c016116f1565b9850985050602089013567ffffffffffffffff81111561189957611898610ddb565b5b6118a58b828c016116f1565b9650965050604089013567ffffffffffffffff8111156118c8576118c7610ddb565b5b6118d48b828c016116f1565b9450945050606089013567ffffffffffffffff8111156118f7576118f6610ddb565b5b6119038b828c016117d6565b92509250509295985092959890939650565b600060608201905061192a60008301866114e4565b61193760208301856114e4565b611944604083018461122d565b949350505050565b61195581610e65565b811461196057600080fd5b50565b6000815190506119728161194c565b92915050565b60006020828403121561198e5761198d610dd6565b5b600061199c84828501611963565b91505092915050565b600082825260208201905092915050565b7f4465706f736974436f6e74726163743a206e6f742061206465706f736974207460008201527f6f6b656e00000000000000000000000000000000000000000000000000000000602082015250565b6000611a126024836119a5565b9150611a1d826119b6565b604082019050919050565b60006020820190508181036000830152611a4181611a05565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611a8282611017565b9150611a8d83611017565b925082611a9d57611a9c611a48565b5b828206905092915050565b7f4465706f736974436f6e74726163743a20696e636f7272656374206465706f7360008201527f69742064617461206c656e677468000000000000000000000000000000000000602082015250565b6000611b04602e836119a5565b9150611b0f82611aa8565b604082019050919050565b60006020820190508181036000830152611b3381611af7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b7482611017565b9150611b7f83611017565b925082611b8f57611b8e611a48565b5b828204905092915050565b7f42617463684465706f7369743a20596f752073686f756c64206465706f73697460008201527f206174206c65617374206f6e652076616c696461746f72000000000000000000602082015250565b6000611bf66037836119a5565b9150611c0182611b9a565b604082019050919050565b60006020820190508181036000830152611c2581611be9565b9050919050565b7f42617463684465706f7369743a20596f752063616e206465706f736974206d6160008201527f78203132382076616c696461746f727320617420612074696d65000000000000602082015250565b6000611c88603a836119a5565b9150611c9382611c2c565b604082019050919050565b60006020820190508181036000830152611cb781611c7b565b9050919050565b6000611cc982611017565b9150611cd483611017565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d0d57611d0c611b3a565b5b828202905092915050565b7f42617463684465706f7369743a206261746368206465706f736974732072657160008201527f75697265203120474e4f206465706f73697420616d6f756e7400000000000000602082015250565b6000611d746039836119a5565b9150611d7f82611d18565b604082019050919050565b60006020820190508181036000830152611da381611d67565b9050919050565b600080fd5b600080fd5b60008085851115611dc857611dc7611daa565b5b83861115611dd957611dd8611daf565b5b6001850283019150848603905094509492505050565b6000611dfa82611017565b9150611e0583611017565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e3a57611e39611b3a565b5b828201905092915050565b600082905092915050565b600082821b905092915050565b6000611e698383611e45565b82611e748135610fe1565b92506020821015611eb457611eaf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802611e50565b831692505b505092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000611ef26010836119a5565b9150611efd82611ebc565b602082019050919050565b60006020820190508181036000830152611f2181611ee5565b9050919050565b6000602082019050611f3d60008301846114e4565b92915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000611f796014836119a5565b9150611f8482611f43565b602082019050919050565b60006020820190508181036000830152611fa881611f6c565b905091905056fea2646970667358221220916d1dce971df262abb10b1b04ba0f7f2cb69f8ad7c527405c105de166ecc0e064736f6c63430008090033",
  "devdoc": {
    "details": "Implementation of the ERC20 ETH2.0 deposit contract. For the original implementation, see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs",
    "kind": "dev",
    "methods": {
      "claimTokens(address,address)": {
        "details": "Allows to transfer any locked token from this contract. Only admin can call this method. Deposit-related tokens cannot be claimed.",
        "params": {
          "_to": "address that will receive the locked tokens from this contract.",
          "_token": "address of the token, if it is not provided (0x00..00), native coins will be transferred."
        }
      },
      "deposit(bytes,bytes,bytes,bytes32,uint256)": {
        "params": {
          "deposit_data_root": "The SHA-256 hash of the SSZ-encoded DepositData object. Used as a protection against malformed input.",
          "pubkey": "A BLS12-381 public key.",
          "signature": "A BLS12-381 signature.",
          "withdrawal_credentials": "Commitment to a public key for withdrawals."
        }
      },
      "executeSystemWithdrawals(uint256,uint64[],address[])": {
        "details": "Function to be used only in the system transaction. Call to this function will revert only in three cases:     - the caller is not `SYSTEM_WITHDRAWAL_EXECUTOR` or `_admin()`;     - the length of `_amounts` array is not equal to the length of `_addresses` array;     - it is a reentrant access to failed withdrawals processing;     - the call ran out of gas. Call to this function doesn't transmit flow control to any untrusted contract and uses a constant gas limit for each withdrawal, so using constant gas limit and constant number of withdrawals (including failed withdrawals) for calls of this function is ok.",
        "params": {
          "_addresses": "Array of addresses that should receive the corresponding amount of tokens.",
          "_amounts": "Array of amounts to be withdrawn.",
          "_maxNumberOfFailedWithdrawalsToProcess": "Maximum number of failed withdrawals to be processed."
        }
      },
      "get_deposit_count()": {
        "returns": {
          "_0": "The deposit count encoded as a little endian 64-bit number."
        }
      },
      "get_deposit_root()": {
        "returns": {
          "_0": "The deposit root hash."
        }
      },
      "isWithdrawalProcessed(uint64)": {
        "details": "Check if a block's withdrawal has been fully processed or not",
        "params": {
          "_withdrawalIndex": "EIP-4895 withdrawal.index property"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "processFailedWithdrawal(uint256,uint256)": {
        "details": "Function to be used to process a failed withdrawal (possibly partially).",
        "params": {
          "_amountToProceed": "Amount of token to withdraw (for the case it is impossible to withdraw the full amount) (available only for the receiver, will be ignored if other account tries to process the withdrawal).",
          "_failedWithdrawalId": "Id of a failed withdrawal."
        }
      },
      "processFailedWithdrawalsFromPointer(uint256)": {
        "details": "Function to be used to process failed withdrawals. Call to this function will revert only if it ran out of gas or it is a reentrant access to failed withdrawals processing. Call to this function doesn't transmit flow control to any untrusted contract and uses a constant gas limit for each withdrawal, so using constant gas limit and constant max number of withdrawals for calls of this function is ok.",
        "params": {
          "_maxNumberOfFailedWithdrawalsToProcess": "Maximum number of failed withdrawals to be processed."
        }
      },
      "processWithdrawalInternal(uint256,address)": {
        "details": "Function to be used to process a withdrawal. Actually it is an internal function, only this contract can call it. This is done in order to roll back all changes in case of revert.",
        "params": {
          "_amount": "Amount to be withdrawn.",
          "_receiver": "Receiver of the withdrawal."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "unwrapTokens(address,address)": {
        "details": "Allows to unwrap the mGNO in this contract to GNO Only admin can call this method.",
        "params": {
          "_unwrapper": "address of the mGNO token unwrapper"
        }
      }
    },
    "title": "SBCDepositContract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DepositEvent(bytes,bytes,bytes,bytes,bytes)": {
        "notice": "A processed deposit event."
      },
      "FailedWithdrawalProcessed(uint256,uint256,address)": {
        "notice": "Processed (possibly partially) failed withdrawal event."
      },
      "WithdrawalExecuted(uint256,address)": {
        "notice": "Executed withdrawal event."
      },
      "WithdrawalFailed(uint256,uint256,address)": {
        "notice": "Failed withdrawal event."
      }
    },
    "kind": "user",
    "methods": {
      "deposit(bytes,bytes,bytes,bytes32,uint256)": {
        "notice": "Submit a Phase 0 DepositData object."
      },
      "get_deposit_count()": {
        "notice": "Query the current deposit count."
      },
      "get_deposit_root()": {
        "notice": "Query the current deposit root hash."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17,
        "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1716,
        "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
        "label": "zero_hashes",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_bytes32)32_storage"
      },
      {
        "astId": 1720,
        "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
        "label": "branch",
        "offset": 0,
        "slot": "33",
        "type": "t_array(t_bytes32)32_storage"
      },
      {
        "astId": 1722,
        "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
        "label": "deposit_count",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 1726,
        "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
        "label": "validator_withdrawal_credentials",
        "offset": 0,
        "slot": "66",
        "type": "t_mapping(t_bytes_memory_ptr,t_bytes32)"
      },
      {
        "astId": 2132,
        "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
        "label": "failedWithdrawals",
        "offset": 0,
        "slot": "67",
        "type": "t_mapping(t_uint256,t_struct(FailedWithdrawalRecord)2127_storage)"
      },
      {
        "astId": 2136,
        "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
        "label": "failedWithdrawalIndexByWithdrawalIndex",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_uint64,t_uint256)"
      },
      {
        "astId": 2138,
        "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
        "label": "numberOfFailedWithdrawals",
        "offset": 0,
        "slot": "69",
        "type": "t_uint256"
      },
      {
        "astId": 2140,
        "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
        "label": "nextWithdrawalIndex",
        "offset": 0,
        "slot": "70",
        "type": "t_uint64"
      },
      {
        "astId": 2153,
        "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
        "label": "failedWithdrawalsPointer",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)32_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[32]",
        "numberOfBytes": "1024"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes_memory_ptr,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(FailedWithdrawalRecord)2127_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SBCDepositContract.FailedWithdrawalRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(FailedWithdrawalRecord)2127_storage"
      },
      "t_mapping(t_uint64,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FailedWithdrawalRecord)2127_storage": {
        "encoding": "inplace",
        "label": "struct SBCDepositContract.FailedWithdrawalRecord",
        "members": [
          {
            "astId": 2122,
            "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2124,
            "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2126,
            "contract": "src/gnosis/SBCDepositContract.sol:SBCDepositContract",
            "label": "withdrawalIndex",
            "offset": 20,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}