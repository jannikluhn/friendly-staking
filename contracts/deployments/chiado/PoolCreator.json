{
  "address": "0x3A3E1247517e1348e333F51eeBaE9865F60A2959",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDepositContract",
          "name": "depositContract_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyDeposited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyFinalized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotFirstFriend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositorNotFriend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDepositAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFriend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFriends",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPoolIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingDeposits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongDepositAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "friend",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardSplitter",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "PoolFinalized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "friend",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "depositDataRoot",
          "type": "bytes32"
        }
      ],
      "name": "finalizePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolIndex",
          "type": "uint256"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "friends",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "bool[]",
              "name": "deposited",
              "type": "bool[]"
            },
            {
              "internalType": "uint256",
              "name": "numDeposited",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFinalized",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "rewardSplitter",
              "type": "address"
            }
          ],
          "internalType": "struct Pool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rugpull",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "friends",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "setupPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcbf9206fd6a8426435307657344adde52085448c341469990790a9595062411c",
  "receipt": {
    "to": null,
    "from": "0xd0F82Ce5B90db8E459d6e2Ca73b1AF6aa50D65c9",
    "contractAddress": "0x3A3E1247517e1348e333F51eeBaE9865F60A2959",
    "transactionIndex": 0,
    "gasUsed": "2095489",
    "logsBloom": "0x
    "blockHash": "0xe1ba6f869721a3dad35aeafb839b38d5ed9c4d334a935e7fea96cca24a360b7f",
    "transactionHash": "0xcbf9206fd6a8426435307657344adde52085448c341469990790a9595062411c",
    "logs": [],
    "blockNumber": 4398586,
    "cumulativeGasUsed": "2095489",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x537AfE2530697749ff0bdab9FdA91c8eB787E889"
  ],
  "numDeployments": 1,
  "solcInputHash": "3bec3c58f187aff380bd39ee145ab943",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDepositContract\",\"name\":\"depositContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyDeposited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyFinalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotFirstFriend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositorNotFriend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDepositAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFriend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFriends\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingDeposits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongDepositAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"friend\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardSplitter\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PoolFinalized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"friend\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"depositDataRoot\",\"type\":\"bytes32\"}],\"name\":\"finalizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"friends\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"deposited\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"numDeposited\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinalized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"rewardSplitter\",\"type\":\"address\"}],\"internalType\":\"struct Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rugpull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"friends\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"setupPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PoolCreator.sol\":\"PoolCreator\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\\n * time of contract deployment and can't be updated thereafter.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable Ether.\\n     */\\n    function releasable(address account) public view returns (uint256) {\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        return _pendingPayment(account, totalReceived, released(account));\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function releasable(IERC20 token, address account) public view returns (uint256) {\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        return _pendingPayment(account, totalReceived, released(token, account));\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _totalReleased is the sum of all values in _released.\\n        // If \\\"_totalReleased += payment\\\" does not overflow, then \\\"_released[account] += payment\\\" cannot overflow.\\n        _totalReleased += payment;\\n        unchecked {\\n            _released[account] += payment;\\n        }\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 payment = releasable(token, account);\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\\n        // If \\\"_erc20TotalReleased[token] += payment\\\" does not overflow, then \\\"_erc20Released[token][account] += payment\\\"\\n        // cannot overflow.\\n        _erc20TotalReleased[token] += payment;\\n        unchecked {\\n            _erc20Released[token][account] += payment;\\n        }\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0xba00a079c0def02f9e905ed091f01bcf9caa41ec215862a315e9f3838be61cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/deposit_contract.sol\":{\"content\":\"// \\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u250f\\u2513\\u2501\\u250f\\u2513\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\n// \\u2503\\u250f\\u2501\\u2501\\u251b\\u250f\\u251b\\u2517\\u2513\\u2503\\u2503\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2517\\u2513\\u250f\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\n// \\u2503\\u2517\\u2501\\u2501\\u2513\\u2517\\u2513\\u250f\\u251b\\u2503\\u2517\\u2501\\u2513\\u2517\\u251b\\u250f\\u251b\\u2503\\u2501\\u2501\\u2503\\u2503\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2503\\u2503\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2513\\u2517\\u2513\\u250f\\u251b\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u2517\\u251b\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2513\\u2501\\u2517\\u2513\\u250f\\u251b\\u250f\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u2501\\u250f\\u2501\\u2501\\u2513\\u2517\\u2513\\u250f\\u251b\\n// \\u2503\\u250f\\u2501\\u2501\\u251b\\u2501\\u2503\\u2503\\u2501\\u2503\\u250f\\u2513\\u2503\\u250f\\u2501\\u251b\\u250f\\u251b\\u2501\\u2501\\u2503\\u2503\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2503\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u2501\\u2501\\u252b\\u2523\\u252b\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u250f\\u2513\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2513\\u2501\\u2503\\u2503\\u2501\\u2503\\u250f\\u251b\\u2517\\u2501\\u2513\\u2503\\u2501\\u2503\\u250f\\u2501\\u251b\\u2501\\u2503\\u2503\\u2501\\n// \\u2503\\u2517\\u2501\\u2501\\u2513\\u2501\\u2503\\u2517\\u2513\\u2503\\u2503\\u2503\\u2503\\u2503\\u2503\\u2517\\u2501\\u2513\\u250f\\u2513\\u2503\\u2517\\u2501\\u251b\\u2503\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u251b\\u2503\\u2503\\u2503\\u2501\\u252b\\u2503\\u2517\\u251b\\u2503\\u2503\\u2517\\u251b\\u2503\\u2523\\u2501\\u2501\\u2503\\u2503\\u2503\\u2501\\u2503\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2503\\u2517\\u2501\\u251b\\u2503\\u2503\\u2517\\u251b\\u2503\\u2503\\u2503\\u2503\\u2503\\u2501\\u2503\\u2517\\u2513\\u2503\\u2503\\u2501\\u2503\\u2517\\u251b\\u2517\\u2513\\u2503\\u2517\\u2501\\u2513\\u2501\\u2503\\u2517\\u2513\\n// \\u2517\\u2501\\u2501\\u2501\\u251b\\u2501\\u2517\\u2501\\u251b\\u2517\\u251b\\u2517\\u251b\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u251b\\u2517\\u2501\\u2501\\u2501\\u251b\\u2501\\u2501\\u2501\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2503\\u250f\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u251b\\u2501\\u2501\\u2501\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2501\\u2517\\u2501\\u251b\\n// \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n// \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2517\\u251b\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n\\n// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity 0.8.20;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x1209bae32c44483b1358d7d10caa1a1d1e5a1ca479144596e1b674217486beac\",\"license\":\"CC0-1.0\"},\"src/PoolCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\nimport \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\nimport \\\"../lib/deposit_contract.sol\\\";\\n\\n\\nstruct Pool {\\n    address[] friends;\\n    uint256[] shares;\\n    bool[] deposited;\\n    uint256 numDeposited;\\n    bool isFinalized;\\n    address rewardSplitter;\\n}\\n\\ncontract PoolCreator {\\n\\n    uint256 public numPools;\\n    mapping(uint256 => Pool) private pools;\\n\\n    IDepositContract depositContract;\\n    address rugpuller;\\n\\n    error InvalidFriends();\\n    error InvalidShares();\\n    error CallerNotFirstFriend();\\n    error WrongDepositAmount();\\n    error InvalidPoolIndex();\\n    error InvalidFriend();\\n    error DepositorNotFriend();\\n    error InvalidDepositAmount();\\n    error MissingDeposits();\\n    error AlreadyDeposited();\\n    error AlreadyFinalized();\\n\\n    event PoolCreated(uint256 index, address rewardSplitter);\\n    event Deposited(uint256 index, uint256 friend);\\n    event PoolFinalized(uint256 index);\\n\\n    constructor(IDepositContract depositContract_) {\\n        depositContract = depositContract_;\\n        rugpuller = msg.sender;\\n    }\\n\\n    function getPool(uint256 poolIndex) public view returns (Pool memory) {\\n        return pools[poolIndex];\\n    }\\n\\n    function setupPool(address[] calldata friends, uint256[] calldata shares) external payable {\\n        if (friends.length < 2) {\\n            revert InvalidFriends();\\n        }\\n\\n        if (shares.length != friends.length) {\\n            revert InvalidShares();\\n        }\\n        uint256 totalShares = 0;\\n        for (uint256 i = 0; i < shares.length; i++) {\\n            if (shares[i] == 0) {\\n                revert InvalidShares();\\n            }\\n            totalShares += shares[i];\\n        }\\n        if (totalShares != 32 ether) {\\n            revert InvalidShares();\\n        }\\n\\n        if (msg.sender != friends[0]) {\\n            revert CallerNotFirstFriend();\\n        }\\n        if (msg.value != shares[0]) {\\n            revert WrongDepositAmount();\\n        }\\n\\n        bool[] memory deposited = new bool[](friends.length);\\n        deposited[0] = true;\\n\\n        PaymentSplitter rewardSplitter = new PaymentSplitter(friends, shares);\\n\\n        Pool memory pool = Pool({\\n            friends: friends,\\n            shares: shares,\\n            deposited: deposited,\\n            numDeposited: 1,\\n            isFinalized: false,\\n            rewardSplitter: address(rewardSplitter)\\n        });\\n        pools[numPools] = pool;\\n        numPools += 1;\\n\\n        emit PoolCreated(numPools - 1, address(rewardSplitter));\\n    }\\n\\n    function deposit(uint256 poolIndex, uint256 friend) external payable {\\n        if (poolIndex >= numPools) {\\n            revert InvalidPoolIndex();\\n        }\\n        Pool storage pool = pools[poolIndex];\\n        if (friend >= pool.friends.length) {\\n            revert InvalidFriend();\\n        }\\n        if (msg.sender != pool.friends[friend]) {\\n            revert DepositorNotFriend();\\n        }\\n        if (msg.value != pool.shares[friend]) {\\n            revert InvalidDepositAmount();\\n        }\\n        if (pool.deposited[friend]) {\\n            revert AlreadyDeposited();\\n        }\\n\\n        pools[poolIndex].deposited[friend] = true;\\n        pools[poolIndex].numDeposited += 1;\\n        emit Deposited(poolIndex, friend);\\n    }\\n\\n    function finalizePool(uint256 poolIndex, bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external {\\n        if (poolIndex >= numPools) {\\n            revert InvalidPoolIndex();\\n        }\\n        Pool memory pool = pools[poolIndex];\\n        if (msg.sender != pool.friends[0]) {\\n            revert CallerNotFirstFriend();\\n        }\\n        if (pool.numDeposited < pool.friends.length) {\\n            revert MissingDeposits();\\n        }\\n        if (pool.isFinalized) {\\n            revert AlreadyFinalized();\\n        }\\n        pools[poolIndex].isFinalized = true;\\n        bytes memory withdrawalCredentials = bytes.concat(\\n            bytes1(0x01),\\n            bytes11(0),\\n            bytes20(address(pool.rewardSplitter))\\n        );\\n        depositContract.deposit{value: 32 ether}(\\n            pubkey,\\n            withdrawalCredentials,\\n            signature,\\n            depositDataRoot\\n        );\\n        emit PoolFinalized(poolIndex);\\n    }\\n\\n    function rugpull() external {\\n        // for debugging, in case we get precious goerli ETH stuck here\\n        require(msg.sender == rugpuller);\\n        msg.sender.call{value: address(this).balance}(\\\"\\\");\\n    }\\n}\\n\\ncontract FakeDepositContract {\\n\\n    address rugpuller;\\n\\n    constructor() {\\n        rugpuller = msg.sender;\\n    }\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable {\\n\\n    }\\n\\n    function rugpull() external {\\n        // for debugging, in case we get previous goerli ETH stuck here\\n        require(msg.sender == rugpuller);\\n        msg.sender.call{value: address(this).balance}(\\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb548a5516a59663db2ba1839e10d6523c82e89dc58657050c927c8c5f4a1d068\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b506040516124b33803806124b383398101604081905261002e9161005c565b600280546001600160a01b039092166001600160a01b03199283161790556003805490911633179055610089565b5f6020828403121561006c575f80fd5b81516001600160a01b0381168114610082575f80fd5b9392505050565b61241d806100965f395ff3fe6080604052600436106200005b575f3560e01c8063068bcd8d146200005f57806335c62bc2146200009b5780634e7c35a714620000c0578063bf7650cb14620000d9578063e2664e4914620000fd578063e2bbb1581462000114575b5f80fd5b3480156200006b575f80fd5b50620000836200007d36600462000dcc565b6200012b565b60405162000092919062000e51565b60405180910390f35b348015620000a7575f80fd5b50620000b15f5481565b60405190815260200162000092565b620000d7620000d136600462000f6c565b620002e2565b005b348015620000e5575f80fd5b50620000d7620000f73660046200101b565b620006eb565b34801562000109575f80fd5b50620000d762000a24565b620000d7620001253660046200109e565b62000a7e565b6200016d6040518060c001604052806060815260200160608152602001606081526020015f81526020015f151581526020015f6001600160a01b031681525090565b5f828152600160209081526040918290208251815460e09381028201840190945260c081018481529093919284928491840182828015620001d657602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311620001b7575b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156200022e57602002820191905f5260205f20905b81548152602001906001019080831162000219575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015620002a557602002820191905f5260205f20905f905b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411620002735790505b50505091835250506003820154602082015260049091015460ff81161515604083015261010090046001600160a01b031660609091015292915050565b60028310156200030557604051634058d41f60e01b815260040160405180910390fd5b8083146200032657604051636edcc52360e01b815260040160405180910390fd5b5f805b82811015620003ae57838382818110620003475762000347620010bf565b905060200201355f036200036e57604051636edcc52360e01b815260040160405180910390fd5b838382818110620003835762000383620010bf565b9050602002013582620003979190620010e7565b915080620003a58162001103565b91505062000329565b50806801bc16d674ec80000014620003d957604051636edcc52360e01b815260040160405180910390fd5b84845f818110620003ee57620003ee620010bf565b90506020020160208101906200040591906200113a565b6001600160a01b0316336001600160a01b0316146200043757604051631aaf920f60e31b815260040160405180910390fd5b82825f8181106200044c576200044c620010bf565b9050602002013534146200047357604051636ff0acf960e11b815260040160405180910390fd5b5f8467ffffffffffffffff8111156200049057620004906200115d565b604051908082528060200260200182016040528015620004ba578160200160208202803683370190505b5090506001815f81518110620004d457620004d4620010bf565b6020026020010190151590811515815250505f86868686604051620004f99062000c67565b62000508949392919062001171565b604051809103905ff08015801562000522573d5f803e3d5ffd5b5090505f6040518060c001604052808989808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525050509082525060408051602089810282810182019093528982529283019290918a918a9182918501908490808284375f920182905250938552505050602080830187905260016040808501829052606085018490526001600160a01b0388166080909501949094528254835281529190208251805193945084939192620005ed9284929091019062000c75565b50602082810151805162000608926001850192019062000cdd565b50604082015180516200062691600284019160209091019062000d19565b506060820151600382015560808201516004909101805460a0909301516001600160a01b031661010002610100600160a81b0319921515929092166001600160a81b0319909316929092171790555f80546001919081906200068a908490620010e7565b90915550505f547f65fc0eb45954044fb55e1b01344d5d72fbfdf88e732d955f73bb7fb2bcc131e990620006c190600190620011f0565b604080519182526001600160a01b0385166020830152015b60405180910390a15050505050505050565b5f5486106200070d5760405163f04e7fbd60e01b815260040160405180910390fd5b5f8681526001602090815260408083208151815460e09481028201850190935260c081018381529093919284928491908401828280156200077657602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831162000757575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015620007ce57602002820191905f5260205f20905b815481526020019060010190808311620007b9575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156200084557602002820191905f5260205f20905f905b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411620008135790505b50505091835250506003820154602082015260049091015460ff81161515604083015261010090046001600160a01b031660609091015280518051919250905f90620008955762000895620010bf565b60200260200101516001600160a01b0316336001600160a01b031614620008cf57604051631aaf920f60e31b815260040160405180910390fd5b80515160608201511015620008f75760405163e700550d60e01b815260040160405180910390fd5b8060800151156200091b5760405163475a253560e01b815260040160405180910390fd5b5f878152600160208181526040808420600401805460ff191690931790925560a08401518251600160f81b928101929092526021820184905260601b6bffffffffffffffffffffffff1916602c8201520160408051601f19818403018152908290526002546304512a2360e31b83529092506001600160a01b0316906322895118906801bc16d674ec80000090620009c2908b908b9087908c908c908c906004016200122e565b5f604051808303818588803b158015620009da575f80fd5b505af1158015620009ed573d5f803e3d5ffd5b50505050507f7ed2d5bdf35d4cb790f65d053de7890f1b4a687ac689ca56c23730833531deb088604051620006d991815260200190565b6003546001600160a01b0316331462000a3b575f80fd5b604051339047905f81818185875af1925050503d805f811462000a79576040519150601f19603f3d011682016040523d82523d5f602084013e505050565b505050565b5f54821062000aa05760405163f04e7fbd60e01b815260040160405180910390fd5b5f8281526001602052604090208054821062000acf57604051638d53b00b60e01b815260040160405180910390fd5b805f01828154811062000ae65762000ae6620010bf565b5f918252602090912001546001600160a01b0316331462000b1a576040516325fb0e6160e01b815260040160405180910390fd5b80600101828154811062000b325762000b32620010bf565b905f5260205f200154341462000b5b5760405163fe9ba5cd60e01b815260040160405180910390fd5b80600201828154811062000b735762000b73620010bf565b905f5260205f2090602091828204019190069054906101000a900460ff161562000bb05760405163d5a8211560e01b815260040160405180910390fd5b5f83815260016020819052604090912060020180548490811062000bd85762000bd8620010bf565b905f5260205f2090602091828204019190066101000a81548160ff0219169083151502179055506001805f8581526020019081526020015f206003015f82825462000c249190620010e7565b909155505060408051848152602081018490527f06da3309189fa49284f335d2c2bcb4cb0b8ad2a59ad92a9bdebeeb8f1ceba511910160405180910390a1505050565b61113680620012b283390190565b828054828255905f5260205f2090810192821562000ccb579160200282015b8281111562000ccb57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000c94565b5062000cd992915062000db6565b5090565b828054828255905f5260205f2090810192821562000ccb579160200282015b8281111562000ccb57825182559160200191906001019062000cfc565b828054828255905f5260205f2090601f0160209004810192821562000ccb579160200282015f5b8382111562000d7e57835183826101000a81548160ff02191690831515021790555092602001926001016020815f0104928301926001030262000d40565b801562000dac5782816101000a81549060ff02191690556001016020815f0104928301926001030262000d7e565b505062000cd99291505b5b8082111562000cd9575f815560010162000db7565b5f6020828403121562000ddd575f80fd5b5035919050565b5f8151808452602080850194508084015f5b8381101562000e145781518752958201959082019060010162000df6565b509495945050505050565b5f8151808452602080850194508084015f5b8381101562000e1457815115158752958201959082019060010162000e31565b6020808252825160c083830152805160e084018190525f929182019083906101008601905b8083101562000ea15783516001600160a01b0316825292840192600192909201919084019062000e76565b50838701519350601f1992508286820301604087015262000ec3818562000de4565b9350505060408501518185840301606086015262000ee2838262000e1f565b9250505060608401516080840152608084015162000f0460a085018215159052565b5060a08401516001600160a01b03811660c0850152509392505050565b5f8083601f84011262000f32575f80fd5b50813567ffffffffffffffff81111562000f4a575f80fd5b6020830191508360208260051b850101111562000f65575f80fd5b9250929050565b5f805f806040858703121562000f80575f80fd5b843567ffffffffffffffff8082111562000f98575f80fd5b62000fa68883890162000f21565b9096509450602087013591508082111562000fbf575f80fd5b5062000fce8782880162000f21565b95989497509550505050565b5f8083601f84011262000feb575f80fd5b50813567ffffffffffffffff81111562001003575f80fd5b60208301915083602082850101111562000f65575f80fd5b5f805f805f806080878903121562001031575f80fd5b86359550602087013567ffffffffffffffff8082111562001050575f80fd5b6200105e8a838b0162000fda565b9097509550604089013591508082111562001077575f80fd5b506200108689828a0162000fda565b979a9699509497949695606090950135949350505050565b5f8060408385031215620010b0575f80fd5b50508035926020909101359150565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115620010fd57620010fd620010d3565b92915050565b5f60018201620011175762001117620010d3565b5060010190565b80356001600160a01b038116811462001135575f80fd5b919050565b5f602082840312156200114b575f80fd5b62001156826200111e565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b604080825281018490525f8560608301825b87811015620011b5576001600160a01b036200119f846200111e565b1682526020928301929091019060010162001183565b5083810360208501528481526001600160fb1b03851115620011d5575f80fd5b8460051b915081866020830137016020019695505050505050565b81810381811115620010fd57620010fd620010d3565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b608081525f6200124360808301888a62001206565b60208382038185015287518083525f5b818110156200127057898101830151848201840152820162001253565b505f838201830152601f01601f191690910183810382016040850152906200129c828201878962001206565b9250505082606083015297965050505050505056fe60806040526040516200113638038062001136833981016040819052620000269162000422565b8051825114620000985760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084015b60405180910390fd5b5f825111620000ea5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f2070617965657300000000000060448201526064016200008f565b5f5b82518110156200015557620001408382815181106200010f576200010f620004f9565b60200260200101518383815181106200012c576200012c620004f9565b60200260200101516200015e60201b60201c565b806200014c8162000521565b915050620000ec565b50505062000558565b6001600160a01b038216620001cb5760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b60648201526084016200008f565b5f81116200021c5760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a2073686172657320617265203000000060448201526064016200008f565b6001600160a01b0382165f9081526002602052604090205415620002975760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b60648201526084016200008f565b60048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b0384169081179091555f90815260026020526040812082905554620002fe9082906200053c565b5f55604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b038111828210171562000385576200038562000346565b604052919050565b5f6001600160401b03821115620003a857620003a862000346565b5060051b60200190565b5f82601f830112620003c2575f80fd5b81516020620003db620003d5836200038d565b6200035a565b82815260059290921b84018101918181019086841115620003fa575f80fd5b8286015b84811015620004175780518352918301918301620003fe565b509695505050505050565b5f806040838503121562000434575f80fd5b82516001600160401b03808211156200044b575f80fd5b818501915085601f8301126200045f575f80fd5b8151602062000472620003d5836200038d565b82815260059290921b8401810191818101908984111562000491575f80fd5b948201945b83861015620004c75785516001600160a01b0381168114620004b7575f8081fd5b8252948201949082019062000496565b91880151919650909350505080821115620004e0575f80fd5b50620004ef85828601620003b2565b9150509250929050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f600182016200053557620005356200050d565b5060010190565b808201808211156200055257620005526200050d565b92915050565b610bd080620005665f395ff3fe60806040526004361061009d575f3560e01c80639852595c116100625780639852595c146101a2578063a3f8eace146101d6578063c45ac050146101f5578063ce7c2ac214610214578063d79779b214610248578063e33b7de31461027c575f80fd5b806319165587146100ea5780633a98ef391461010b578063406072a91461012d57806348b750441461014c5780638b83209b1461016b575f80fd5b366100e6577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b5f80fd5b3480156100f5575f80fd5b50610109610104366004610977565b610290565b005b348015610116575f80fd5b505f545b6040519081526020015b60405180910390f35b348015610138575f80fd5b5061011a610147366004610992565b61037b565b348015610157575f80fd5b50610109610166366004610992565b6103a7565b348015610176575f80fd5b5061018a6101853660046109c9565b6104b3565b6040516001600160a01b039091168152602001610124565b3480156101ad575f80fd5b5061011a6101bc366004610977565b6001600160a01b03165f9081526003602052604090205490565b3480156101e1575f80fd5b5061011a6101f0366004610977565b6104e1565b348015610200575f80fd5b5061011a61020f366004610992565b610527565b34801561021f575f80fd5b5061011a61022e366004610977565b6001600160a01b03165f9081526002602052604090205490565b348015610253575f80fd5b5061011a610262366004610977565b6001600160a01b03165f9081526005602052604090205490565b348015610287575f80fd5b5060015461011a565b6001600160a01b0381165f908152600260205260409020546102cd5760405162461bcd60e51b81526004016102c4906109e0565b60405180910390fd5b5f6102d7826104e1565b9050805f036102f85760405162461bcd60e51b81526004016102c490610a26565b8060015f8282546103099190610a85565b90915550506001600160a01b0382165f90815260036020526040902080548201905561033582826105ca565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a15050565b6001600160a01b038083165f908152600660209081526040808320938516835292905220545b92915050565b6001600160a01b0381165f908152600260205260409020546103db5760405162461bcd60e51b81526004016102c4906109e0565b5f6103e68383610527565b9050805f036104075760405162461bcd60e51b81526004016102c490610a26565b6001600160a01b0383165f908152600560205260408120805483929061042e908490610a85565b90915550506001600160a01b038084165f9081526006602090815260408083209386168352929052208054820190556104688383836106e4565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b5f600482815481106104c7576104c7610a98565b5f918252602090912001546001600160a01b031692915050565b5f806104ec60015490565b6104f69047610a85565b9050610520838261051b866001600160a01b03165f9081526003602052604090205490565b610736565b9392505050565b6001600160a01b0382165f9081526005602052604081205481906040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015610583573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105a79190610aac565b6105b19190610a85565b90506105c2838261051b878761037b565b949350505050565b8047101561061a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102c4565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610663576040519150601f19603f3d011682016040523d82523d5f602084013e610668565b606091505b50509050806106df5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102c4565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106df908490610770565b5f80546001600160a01b03851682526002602052604082205483919061075c9086610ac3565b6107669190610ada565b6105c29190610af9565b5f6107c4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108439092919063ffffffff16565b905080515f14806107e45750808060200190518101906107e49190610b0c565b6106df5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102c4565b60606105c284845f85855f80866001600160a01b031685876040516108689190610b4d565b5f6040518083038185875af1925050503d805f81146108a2576040519150601f19603f3d011682016040523d82523d5f602084013e6108a7565b606091505b50915091506108b8878383876108c3565b979650505050505050565b606083156109315782515f0361092a576001600160a01b0385163b61092a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102c4565b50816105c2565b6105c283838151156109465781518083602001fd5b8060405162461bcd60e51b81526004016102c49190610b68565b6001600160a01b0381168114610974575f80fd5b50565b5f60208284031215610987575f80fd5b813561052081610960565b5f80604083850312156109a3575f80fd5b82356109ae81610960565b915060208301356109be81610960565b809150509250929050565b5f602082840312156109d9575f80fd5b5035919050565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b808201808211156103a1576103a1610a71565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215610abc575f80fd5b5051919050565b80820281158282048414176103a1576103a1610a71565b5f82610af457634e487b7160e01b5f52601260045260245ffd5b500490565b818103818111156103a1576103a1610a71565b5f60208284031215610b1c575f80fd5b81518015158114610520575f80fd5b5f5b83811015610b45578181015183820152602001610b2d565b50505f910152565b5f8251610b5e818460208701610b2b565b9190910192915050565b602081525f8251806020840152610b86816040850160208701610b2b565b601f01601f1916919091016040019291505056fea2646970667358221220d900b42170cbd10452e83d0ce5b307501bbdaab00c873b8378ae87a3d0e5691464736f6c63430008140033a26469706673582212202fc8d51b4624ecc1250a3aca39fd7b6810bc247780d71909c614dbe455dd3a3864736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1441,
        "contract": "src/PoolCreator.sol:PoolCreator",
        "label": "numPools",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1446,
        "contract": "src/PoolCreator.sol:PoolCreator",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Pool)1439_storage)"
      },
      {
        "astId": 1449,
        "contract": "src/PoolCreator.sol:PoolCreator",
        "label": "depositContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDepositContract)1369"
      },
      {
        "astId": 1451,
        "contract": "src/PoolCreator.sol:PoolCreator",
        "label": "rugpuller",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bool)dyn_storage": {
        "base": "t_bool",
        "encoding": "dynamic_array",
        "label": "bool[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDepositContract)1369": {
        "encoding": "inplace",
        "label": "contract IDepositContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Pool)1439_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)1439_storage"
      },
      "t_struct(Pool)1439_storage": {
        "encoding": "inplace",
        "label": "struct Pool",
        "members": [
          {
            "astId": 1426,
            "contract": "src/PoolCreator.sol:PoolCreator",
            "label": "friends",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1429,
            "contract": "src/PoolCreator.sol:PoolCreator",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1432,
            "contract": "src/PoolCreator.sol:PoolCreator",
            "label": "deposited",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bool)dyn_storage"
          },
          {
            "astId": 1434,
            "contract": "src/PoolCreator.sol:PoolCreator",
            "label": "numDeposited",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1436,
            "contract": "src/PoolCreator.sol:PoolCreator",
            "label": "isFinalized",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1438,
            "contract": "src/PoolCreator.sol:PoolCreator",
            "label": "rewardSplitter",
            "offset": 1,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}